Windows 消息列表

WM_NULL := 0x00
空消息,可检测程序是否有响应等

WM_CREATE := 0x01
应用程序创建一个窗口

WM_DESTROY := 0x02
一个窗口被销毁

WM_MOVE := 0x03
移动一个窗口

WM_SIZE := 0x05
改变一个窗口的大小

WM_ACTIVATE := 0x06
一个窗口被激活或失去激活状态

WM_SETFOCUS := 0x07
获得焦点后

WM_KILLFOCUS := 0x08
失去焦点

WM_ENABLE := 0x0A
改变enable状态

WM_SETREDRAW := 0x0B
设置窗口是否能重画

WM_SETTEXT := 0x0C
应用程序发送此消息来设置一个窗口的文本

WM_GETTEXT := 0x0D
应用程序发送此消息来复制对应窗口的文本到缓冲区

WM_GETTEXTLENGTH := 0x0E
得到与一个窗口有关的文本的长度（不包含空字符）

WM_PAINT := 0x0F
要求一个窗口重画自己

WM_CLOSE := 0x10
当一个窗口或应用程序要关闭时发送一个信号

WM_QUERYENDSESSION := 0x11
当用户选择结束对话框或程序自己调用ExitWindows函数

WM_QUIT := 0x12
用来结束程序运行或当程序调用postquitmessage函数

WM_QUERYOPEN := 0x13
当用户窗口恢复以前的大小位置时，把此消息发送给某个图标

WM_ERASEBKGND := 0x14
当窗口背景必须被擦除时（例在窗口改变大小时）

WM_SYSCOLORCHANGE := 0x15
当系统颜色改变时，发送此消息给所有顶级窗口

WM_ENDSESSION := 0x16
当系统进程发出WM_QUERYENDSESSION消息后，此消息发送给应用程序，通知它对话是否结束

WM_SYSTEMERROR := 0x17

WM_SHOWWINDOW := 0x18
当隐藏或显示窗口是发送此消息给这个窗口

WM_ACTIVATEAPP := 0x1C
发此消息给应用程序哪个窗口是激活的，哪个是非激活的

WM_FONTCHANGE := 0x1D
当系统的字体资源库变化时发送此消息给所有顶级窗口

WM_TIMECHANGE:= 0x1E
当系统的时间变化时发送此消息给所有顶级窗口

WM_CANCELMODE := 0x1F
发送此消息来取消某种正在进行的摸态（操作）

WM_SETCURSOR := 0x20
如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口

WM_MOUSEACTIVATE := 0x21
当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口

WM_CHILDACTIVATE := 0x22
发送此消息给MDI子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小

WM_QUEUESYNC := 0x23
此消息由基于计算机的训练程序发送，通过WH_JOURNALPALYBACK的hook程序分离出用户输入消息

WM_GETMINMAXINFO := 0x24
此消息发送给窗口当它将要改变大小或位置

WM_PAINTICON := 0x26
发送给最小化窗口当它图标将要被重画

WM_ICONERASEBKGND := 0x27
此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画

WM_NEXTDLGCTL := 0x28
发送此消息给一个对话框程序去更改焦点位置

WM_SPOOLERSTATUS := 0x2A
每当打印管理列队增加或减少一条作业时发出此消息

WM_DRAWITEM := 0x2B
当button，combobox，listbox，menu的可视外观改变时发送，此消息给这些空件的所有者

WM_MEASUREITEM := 0x2C
当button, combo box, list box, list view control, or menu item 被创建时，发送此消息给控件的所有者

WM_DELETEITEM := 0x2D
当the list box 或 combo box 被销毁 或 当 某些项被删除通过LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT 消息

WM_VKEYTOITEM := 0x2E
此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应WM_KEYDOWN消息

WM_CHARTOITEM := 0x2F
此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应WM_CHAR消息

WM_SETFONT := 0x30
当绘制文本时程序发送此消息得到控件要用的颜色

WM_GETFONT := 0x31
应用程序发送此消息得到当前控件绘制文本的字体

WM_SETHOTKEY := 0x32
应用程序发送此消息让一个窗口与一个热键相关连

WM_GETHOTKEY := 0x33
应用程序发送此消息来判断热键与某个窗口是否有关联

WM_QUERYDRAGICON := 0x37
此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标

WM_COMPAREITEM := 0x39
发送此消息来判定combobox或listbox新增加的项的相对位置

WM_COMPACTING := 0x41
显示内存已经很少了

WM_WINDOWPOSCHANGING := 0x46
发送此消息给那个窗口的大小和位置将要被改变时，来调用setwindowpos函数或其它窗口管理函数

WM_WINDOWPOSCHANGED := 0x47
发送此消息给那个窗口的大小和位置已经被改变时，来调用setwindowpos函数或其它窗口管理函数

WM_POWER := 0x48（适用于16位的windows）
当系统将要进入暂停状态时发送此消息

WM_COPYDATA := 0x4A
当一个应用程序传递数据给另一个应用程序时发送此消息

WM_CANCELJOURNAL := 0x4B
当某个用户取消程序日志激活状态，提交此消息给程序

WM_NOTIFY := 0x4E
当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口

WM_INPUTLANGCHANGEREQUEST := 0x50
当用户选择某种输入语言，或输入语言的热键改变

WM_INPUTLANGCHANGE := 0x51
当平台现场已经被改变后发送此消息给受影响的最顶级窗口

WM_TCARD := 0x52
当程序已经初始化windows帮助例程时发送此消息给应用程序

WM_HELP := 0x53
此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口

WM_USERCHANGED := 0x54
当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体设置信息，在用户更新设置时系统马上发送此消息

WM_NOTIFYFORMAT := 0x55
公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构
在WM_NOTIFY消息，使用此控件能使某个控件与它的父控件之间进行相互通信

WM_CONTEXTMENU := 0x7B
当用户某个窗口中点击了一下右键就发送此消息给这个窗口

WM_STYLECHANGING := 0x7C
当调用SETWINDOWLONG函数将要改变一个或多个 窗口的风格时发送此消息给那个窗口

WM_STYLECHANGED := 0x7D
当调用SETWINDOWLONG函数一个或多个 窗口的风格后发送此消息给那个窗口

WM_DISPLAYCHANGE := 0x7E
当显示器的分辨率改变后发送此消息给所有的窗口

WM_GETICON := 0x7F
此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄

WM_SETICON := 0x80
程序发送此消息让一个新的大图标或小图标与某个窗口关联

WM_NCCREATE := 0x81
当某个窗口第一次被创建时，此消息在WM_CREATE消息发送前发送

WM_NCDESTROY := 0x82
此消息通知某个窗口，非客户区正在销毁

WM_NCCALCSIZE := 0x83
当某个窗口的客户区域必须被核算时发送此消息

WM_NCHITTEST := 0x84
移动鼠标，按住或释放鼠标时发生

WM_NCPAINT := 0x85
程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时【AHK为新建窗口时】

WM_NCACTIVATE := 0x86
此消息发送给某个窗口 仅当它的非客户区需要被改变来显示是激活还是非激活状态

WM_GETDLGCODE := 0x87
发送此消息给某个与对话框程序关联的控件，widdows控制方位键和TAB键使输入进入此控件
通过响应WM_GETDLGCODE消息，应用程序可以把他当成一个特殊的输入控件并能处理它

WM_NCMOUSEMOVE := 0xA0
当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 非客户区为：窗体的标题栏及窗的边框体

WM_NCLBUTTONDOWN := 0xA1
当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息

WM_NCLBUTTONUP := 0xA2
当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息

WM_NCLBUTTONDBLCLK := 0xA3
当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息

WM_NCRBUTTONDOWN := 0xA4
当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息

WM_NCRBUTTONUP := 0xA5
当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息

WM_NCRBUTTONDBLCLK := 0xA6
当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息

WM_NCMBUTTONDOWN := 0xA7
当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息

WM_NCMBUTTONUP := 0xA8
当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息

WM_NCMBUTTONDBLCLK := 0xA9
当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息

WM_KEYFIRST := 0x100
用于WinCE系统,本消息在使用GetMessage和PeekMessage函数时,用于过滤键盘消息

WM_KEYDOWN := 0x100
按下一个键

WM_KEYUP := 0x101
释放一个键

WM_CHAR := 0x102
按下某键，并已发出WM_KEYDOWN， WM_KEYUP消息

WM_DEADCHAR := 0x103
当用translatemessage函数翻译WM_KEYUP消息时发送此消息给拥有焦点的窗口

WM_SYSKEYDOWN := 0x104
当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口

WM_SYSKEYUP := 0x105
当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口

WM_SYSCHAR := 0x106
当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口

WM_SYSDEADCHAR := 0x107
当WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口

WM_KEYLAST := 0x108
用于WinCE系统,本消息在使用GetMessage和PeekMessage函数时,用于过滤键盘消息

WM_IME_STARTCOMPOSITION := 0x10D
当用户开始输入编码时,系统立即发送该消息到IME中,IME打开编码窗口,注:输入法相关

WM_IME_ENDCOMPOSITION := 0x10E
当编码结束时,IME发送本消息,用户程序可接受本消息,以便自己显示用户输入的编码,注:输入法相关

WM_IME_COMPOSITION := 0x10F
当用户改变了编码状态时,发送本消息,应用程序可通过调用ImmGetCompositionString函数获取新的编码状态

WM_IME_KEYLAST := 0x10F
当用户改变了编码状态时,发送本消息,应用程序可通过调用ImmGetCompositionString函数获取新的编码状态

WM_INITDIALOG := 0x110
在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务

WM_COMMAND := 0x111
当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，或某快捷键被翻译时,本消息被发送

WM_SYSCOMMAND := 0x112
当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息

WM_TIMER := 0x113
发生了定时器事件

WM_HSCROLL := 0x114
当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件

WM_VSCROLL := 0x115
当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也，发送给拥有它的控件 WM_INITME

WM_INITMENU := 0x116
当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单

WM_INITMENUPOPUP := 0x117
当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部

WM_MENUSELECT := 0x11F
当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）

WM_MENUCHAR := 0x120
当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者

WM_ENTERIDLE := 0x121
当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待

WM_CTLCOLORMSGBOX := 0x132
在windows绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色

WM_CTLCOLOREDIT := 0x133
当一个编辑型控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色

WM_CTLCOLORLISTBOX := 0x134
当一个列表框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色

WM_CTLCOLORBTN := 0x135
当一个按钮控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色

WM_CTLCOLORDLG := 0x136
当一个对话框控件将要被绘制前发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色

WM_CTLCOLORSCROLLBAR:= 0x137
当一个滚动条控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色

WM_CTLCOLORSTATIC := 0x138
当一个静态控件将要被绘制时发送此消息给它的父窗口通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色

WM_MOUSEFIRST := 0x200
鼠标移动时发生(与WM_MOUSEMOVE等值),常用于判断鼠标消息的范围,比如:if(message >= WM_MOUSEFIRST)&&(message <= WM_MOUSELAST)

WM_MOUSEMOVE := 0x200
移动鼠标

WM_LBUTTONDOWN := 0x201
按下鼠标左键

WM_LBUTTONUP := 0x202
释放鼠标左键

WM_LBUTTONDBLCLK := 0x203
双击鼠标左键

WM_RBUTTONDOWN := 0x204
按下鼠标右键

WM_RBUTTONUP := 0x205
释放鼠标右键

WM_RBUTTONDBLCLK := 0x206
双击鼠标右键

WM_MBUTTONDOWN := 0x207
按下鼠标中键

WM_MBUTTONUP := 0x208
释放鼠标中键

WM_MBUTTONDBLCLK := 0x209
双击鼠标中键

WM_MOUSEWHEEL := 0x20A
当鼠标轮子转动时发送此消息个当前有焦点的控件

WM_MOUSEHWHEEL := 0x20E

WM_PARENTNOTIFY := 0x210
当MDI子窗口被创建或被销毁，或用户按了一下鼠标键而光标在子窗口上时发送此消息给它的父窗口

WM_ENTERMENULOOP := 0x211
发送此消息通知应用程序的主窗口that已经进入了菜单循环模式

WM_EXITMENULOOP := 0x212
发送此消息通知应用程序的主窗口that已退出了菜单循环模式

WM_NEXTMENU := 0x213
当使用左箭头光标键或右箭头光标键在菜单条与系统菜单之间切换时,会发送本消息给应用程序,相关结构体:MDINEXTMENU

WM_SIZING := 0x214
当用户正在调整窗口大小时发送此消息给窗口通过此消息应用程序可以监视窗口大小和位置也可以修改他们

WM_CAPTURECHANGED := 0x215
发送此消息 给窗口当它失去捕获的鼠标时

WM_MOVING := 0x216
当用户在移动窗口时发送此消息，通过此消息应用程序可以监视窗口大小和位置也可以修改他们

WM_POWERBROADCAST := 0x218
此消息发送给应用程序来通知它有关电源管理事件

WM_DEVICECHANGE := 0x219
当设备的硬件配置改变时发送此消息给应用程序或设备驱动程序

WM_MDICREATE := 0x220
应用程序发送此消息给多文档的客户窗口来创建一个MDI 子窗口

WM_MDIDESTROY := 0x221
应用程序发送此消息给多文档的客户窗口来关闭一个MDI 子窗口

WM_MDIACTIVATE := 0x222
应用程序发送此消息给多文档的客户窗口通知客户窗口激活另一个MDI子窗口，当客户窗口收到此消息后，它发出WM_MDIACTIVE消息给MDI子窗口（未激活）激活它

WM_MDIRESTORE := 0x223
程序 发送此消息给MDI客户窗口让子窗口从最大最小化恢复到原来大小

WM_MDINEXT := 0x224
程序 发送此消息给MDI客户窗口激活下一个或前一个窗口

WM_MDIMAXIMIZE := 0x225
程序发送此消息给MDI客户窗口来最大化一个MDI子窗口

WM_MDITILE := 0x226
程序 发送此消息给MDI客户窗口以平铺方式重新排列所有MDI子窗口

WM_MDICASCADE := 0x227
程序 发送此消息给MDI客户窗口以层叠方式重新排列所有MDI子窗口

WM_MDIICONARRANGE := 0x228
程序 发送此消息给MDI客户窗口重新排列所有最小化的MDI子窗口

WM_MDIGETACTIVE := 0x229
程序 发送此消息给MDI客户窗口来找到激活的子窗口的句柄

WM_MDISETMENU := 0x230
程序 发送此消息给MDI客户窗口用MDI菜单代替子窗口的菜单

WM_ENTERSIZEMOVE := 0x231
当某窗口进入移动或调整大小的模式循环时,本消息发送到该窗口

WM_EXITSIZEMOVE := 0x232
确定用户改变窗口大小或改变窗口位置的事件是何时完成的

WM_DROPFILES := 0x233
鼠标拖放时,放下事件产生时发送本消息,比如:文件拖放功能

WM_MDIREFRESHMENU := 0x234
发送本消息给多文档应用程序的客户窗口,根据当前MDI子窗口更新MDI框架窗口的菜单

WM_IME_SETCONTEXT := 0x281
应用程序的窗口激活时,系统将向应用程序发送WM_IME_SETCONTEXT消息,注:输入法相关

WM_IME_NOTIFY := 0x282
可使用WM_IME_NOTIFY消息来通知关于IME窗口状态的常规改变,注:输入法相关

WM_IME_CONTROL := 0x283
可使用WM_IME_CONTROL消息来改变字母组合窗口的位置,注:输入法相关

WM_IME_COMPOSITIONFULL := 0x284
用户接口窗口不能增加编码窗口的尺寸时,IME用户接口窗口将发送WM_IME_COMPOSITIONFULL消息,可不处理,注:输入法相关

WM_IME_SELECT := 0x285
系统发出WM_IME_SELECT以便选择一个新的IME输入法,注:输入法相关

WM_IME_CHAR := 0x286
当打开输入法输入文字时,会发送WM_IME_CHAR消息

WM_IME_REQUEST := 0x288
应用程序请求输入法时,触发发送本消息

WM_IME_KEYDOWN := 0x290
在输入法录字窗口中按下按键时,触发发送本消息

WM_IME_KEYUP := 0x291
在输入法录字窗口中释放按键时,触发发送本消息

WM_MOUSEHOVER := 0x2A1
鼠标移过控件时,触发发送本消息

WM_NCMOUSELEAVE := 0x2A2

WM_MOUSELEAVE := 0x2A3
鼠标离开控件时,触发发送本消息

WM_CUT := 0x300
应用程序发送本消息给一个编辑框或组合框来删除当前选择的文本

WM_COPY := 0x301
程序发送此消息给一个编辑框或combobox来复制当前选择的文本到剪贴板

WM_PASTE := 0x302
程序发送此消息给editcontrol或combobox从剪贴板中得到数据

WM_CLEAR := 0x303
一个DDE客户程序提交此消息开始一个与服务器程序的会话来响应那个指定的程序和主题名

WM_UNDO := 0x304
应用程序发送本消息给编辑框或组合框,以撤消最后一次操作

WM_RENDERFORMAT := 0x305
应用程序需要系统剪切板数据时,触发发送本消息

WM_RENDERALLFORMATS := 0x306
应用程序退出时在程序退出时,系统会给当前程序发送该消息,要求提供所有格式的剪帖板数据,避免造成数据丢失

WM_DESTROYCLIPBOARD := 0x307
当调用EmptyClipboard函数时,发送本消息给剪贴板的所有者

WM_DRAWCLIPBOARD := 0x308
当剪贴板的内容变化时,发送本消息给剪贴板观察链的首个窗口;它允许用剪贴板观察窗口来显示剪贴板的新内容

WM_PAINTCLIPBOARD := 0x309
当剪贴板包含CF_OWNERDIPLAY格式的数据,并且剪贴板观察窗口的客户区需要重画时,触发发送本消息

WM_VSCROLLCLIPBOARD := 0x30A
当剪贴板查看器的垂直滚动条被单击时,触发发送本消息

WM_SIZECLIPBOARD := 0x30B
当剪贴板包含CF_OWNERDIPLAY格式的数据,并且剪贴板观察窗口的客户区域的大小已改变时,本消息通过剪贴板观察窗口发送给剪贴板的所有者

WM_ASKCBFORMATNAME := 0x30C
通过剪贴板观察窗口发送本消息给剪贴板的所有者,以请求一个CF_OWNERDISPLAY格式的剪贴板的名字

WM_CHANGECBCHAIN := 0x30D
当一个窗口从剪贴板观察链中移去时,发送本消息给剪贴板观察链的首个窗口

WM_HSCROLLCLIPBOARD := 0x30E
本消息通过一个剪贴板观察窗口发送给剪贴板的所有者,它发生在当剪贴板包含CFOWNERDISPALY格式的数据,并且有个事件在剪贴板观察窗的水平滚动条上,所有者应滚动剪贴板图像并更新滚动条的值

WM_QUERYNEWPALETTE := 0x30F
本消息发送给将要收到焦点的窗口,本消息能使窗口在收到焦点时同时有机会实现逻辑调色板

WM_PALETTEISCHANGING := 0x310
当一个应用程序正要实现它的逻辑调色板时,发本消息通知所有的应用程序

WM_PALETTECHANGED := 0x311
本消息在一个拥有焦点的窗口实现它的逻辑调色板后,发送本消息给所有顶级并重叠的窗口,以此来改变系统调色板

WM_HOTKEY := 0x312
当用户按下由RegisterHotKey函数注册的热键时,发送本消息

WM_PRINT := 0x317
发送本消息给一个窗口请求在指定的设备上下文中绘制自身,可用于窗口截图,但对子控件截图时得到的是与子控件等大的黑块

WM_PRINTCLIENT := 0x318
送本消息给一个窗口请求在指定的设备上下文中绘制其客户区(最通常是在一个打印机设备上下文中)

WM_HANDHELDFIRST := 0x358
消息含义未知,搜索了整个Visual Studio 6的目录也只有其定义,却未见其使用的相关代码

WM_HANDHELDLAST := 0x35F
消息含义未知,搜索了整个Visual Studio 6的目录也只有其定义,却未见其使用的相关代码

WM_PENWINFIRST := 0x380
指定首个Pen Window消息,参见:PENWIN.H/WINUSER.H

WM_PENWINLAST := 0x38F
指定末个Pen Window消息,参见:PENWIN.H/WINUSER.H

WM_COALESCE_FIRST := 0x390
指定首个DDE消息,其它的DDE消息以WM_DDE_FIRST + X的形式定义,如:WM_DDE_TERMINATE定义为:WM_DDE_FIRST+1

WM_COALESCE_LAST := 0x39F

WM_DDE_FIRST := 0x3E0

WM_DDE_INITIATE := 0x3E0

WM_DDE_TERMINATE := 0x3E1
一个DDE应用程序（无论是客户还是服务器）提交此消息来终止一个会话

WM_DDE_ADVISE := 0x3E2
一个DDE客户程序提交此消息给一个DDE服务程序来请求服务器每当数据项改变时更新它

WM_DDE_UNADVISE := 0x3E3
一个DDE客户程序通过此消息通知一个DDE服务程序不更新指定的项或一个特殊的剪贴板格式的项

WM_DDE_ACK := 0x3E4
此消息通知一个DDE（动态数据交换）程序已收到并正在处理WM_DDE_POKE, WM_DDE_EXECUTE, WM_DDE_DATA, WM_DDE_ADVISE, WM_DDE_UNADVISE, or WM_DDE_INITIAT消息

WM_DDE_DATA := 0x3E5
一个DDE服务程序提交此消息给DDE客户程序来传递个一数据项给客户或通知客户的一条可用数据项

WM_DDE_REQUEST := 0x3E6
一个DDE客户程序提交此消息给一个DDE服务程序来请求一个数据项的值

WM_DDE_POKE := 0x3E7
一个DDE客户程序提交此消息给一个DDE服务程序，客户使用此消息来请求服务器接收一个未经同意的数据项服务器通过答复WM_DDE_ACK消息提示是否它接收这个数据项

WM_DDE_EXECUTE := 0x3E8
一个DDE客户程序提交此消息给一个DDE服务程序来发送一个字符串给服务器让它象串行命令一样被处理，服务器通过提交WM_DDE_ACK消息来作回应

WM_DDE_LAST := 0x3E8
指定末个DDE消息,与WM_DDE_EXECUTE消息等值

WM_USER := 0x400
用于帮助应用程序自定义私有消息,通常形式为:WM_USER + X

WM_APP := 0x8000
用于帮助应用程序自定义私有消息,通常形式为:WM_APP + X


它在Windows单元中是这样声明的：
type
TMsg := packed record
hwnd: HWND / /窗口句柄
message: UINT / /消息常量标识符
wParam: WPARAM   32位消息的特定附加信息
lParam: LPARAM   32位消息的特定附加信息
time: DWORD / /消息创建时的时间
pt: TPoint / /消息创建时的鼠标位置
end

消息中有什么？ 是否觉得一个消息记录中的信息像希腊语一样？如果是这样，那么看一看下面的解释：
hwnd 32位的窗口句柄。窗口可以是任何类型的屏幕对象，因为Win32能够维护大多数可视对象的句柄(窗口、对话框、按钮、编辑框等)。
message 用于区别其他消息的常量值，这些常量可以是Windows单元中预定义的常量，也可以是自定义的常量。
wParam 通常是一个与消息有关的常量值，也可能是窗口或控件的句柄。
lParam 通常是一个指向内存中数据的指针。由于WParam、lParam和Pointer都是32位的，
因此，它们之间可以相互转换。